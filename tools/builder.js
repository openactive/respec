#!/usr/local/bin/node

"use strict";
const async = require("marcosc-async");
const fsp = require("fs-promise");
const pth = require("path");
const r = require("requirejs");

/**
 * Finds the name of the map file generated by Requirejs, and replaces it
 * with one that matches the filename of the ReSpec output file.
 *
 * @param  {String} respecJs The source for ReSpec, as produced by Requirejs.
 * @param  {String} outPath The path for the ReSpec source output file.
 * @return {Object} An object with a updated `source` and the new filename for
 *                  the map file.
 */
function replaceMapFilename(respecJs, outPath){
  const basename = pth.basename(outPath, ".js");
  const currentMapFilename = respecJs.match(/\/\/# sourceMappingURL=(.+)/)[1];
  const newMapFilename = basename + ".build.js.map";
  const source = respecJs.replace(currentMapFilename, newMapFilename);
  const mapPath = pth.resolve(outPath, `../${newMapFilename}`);
  return {
    source,
    mapPath,
  };
}

/**
 * Replaces the version number in the boilerplate.
 *
 * @param {String} optimizedJs The optimized script.
 * @param {String} version The version string.
 */
function replaceVersionString(optimizedJs, version){
  return optimizedJs.replace("<<ReSpec-Version-Number>>", version);
}

 /**
 * Async function that appends the boilerplate to the generated script
 * and writes out the result. It also creates the source map file.
 *
 * @private
 * @param  {String} outPath Where to write the output to.
 * @param  {String} version The version of the script.
 * @return {Promise} Resolves when done writing the files.
 */
function writeOutput(outPath, version) {
  return async(function*(optimizedJs, sourceMap) {
    let newSource = replaceMapFilename(optimizedJs, outPath);
    newSource.source = replaceVersionString(newSource.source, version);
    const promiseToWriteJs = fsp.writeFile(outPath, newSource.source, "utf-8");
    const promiseToWriteMap = fsp.writeFile(newSource.mapPath, sourceMap, "utf-8");
    yield Promise.all([promiseToWriteJs, promiseToWriteMap]);
  }, Builder);
}

var Builder = {
  /**
   * Async function that gets the current version of ReSpec from package.json
   *
   * @returns {Promise<String>} The version string.
   */
  getRespecVersion: async(function*() {
    const path = pth.join(__dirname, "../package.json");
    const content = yield fsp.readFile(path, "utf-8");
    return JSON.parse(content).version;
  }),

  /**
   * Async function runs Requirejs' optimizer to generate the output.
   *
   * using a custom configuration.
   * @param {Object} output The output options
   * @param {String} output.out The path where to write the optimized file.
   * @param {String} output.version The version number to use.
   */
  build(options) {
    return async.task(function*() {
      // optimisation settings
      const version = options.version || (yield this.getRespecVersion());
      const outputWritter = writeOutput(options.out, version);
      const config = {
        insertRequire: ["profile-w3c-common"],
        wrap: {
          startFile: [
            "tools/inserts/boilerplate.frag",
            "tools/inserts/wrapperFunction.frag",
          ],
          endFile: [
            "tools/inserts/wrapperFunctionEnd.frag",
          ],
        },
        generateSourceMaps: true,
        mainConfigFile: "js/profile-w3c-common.js",
        baseUrl: pth.join(__dirname, "../js/"),
        optimize: options.optimize || "uglify2",
        paths: {
          "fetch": "../node_modules/whatwg-fetch/fetch",
          "handlebars": "../node_modules/handlebars/dist/handlebars",
          "jquery": "../node_modules/jquery/dist/jquery",
          "Promise": "../node_modules/promise-polyfill/promise",
          "requireLib": "../node_modules/requirejs/require",
          "webidl2": "../node_modules/webidl2/lib/webidl2",
        },
        name: "profile-w3c-common",
        deps: [
          "core/jquery-enhanced",
          "jquery",
          "Promise",
          "requireLib",
        ],
        inlineText: true,
        preserveLicenseComments: false,
        useStrict: true,
      };
      const promiseToWrite = new Promise((resolve, reject)=>{
        config.out = (optimizedJs, sourceMap) => {
          outputWritter(optimizedJs, sourceMap)
            .then(resolve)
            .catch(reject);
        };
      });
      r.optimize(config);
      yield promiseToWrite;
    }, this);
  },
};

exports.Builder = Builder;
